Terminals unused in grammar

    TRUE
    FALSE


State 89 conflicts: 1 shift/reduce


Grammar

    0 $accept: function $end

    1 function: function_header optional_variable body

    2 function_header: FUNCTION IDENTIFIER parameters RETURNS type ';'
    3                | FUNCTION IDENTIFIER RETURNS type ';'
    4                | error ';'

    5 optional_variable: variable optional_variable
    6                  | %empty

    7 variable: IDENTIFIER ':' type IS statement_
    8         | error

    9 parameters: parameter optional_parameter

   10 optional_parameter: optional_parameter ',' parameter
   11                   | %empty

   12 parameter: IDENTIFIER ':' type

   13 type: INTEGER
   14     | REAL
   15     | BOOLEAN

   16 body: BEGIN_ statement_ END ';'

   17 statement_: statement
   18           | error

   19 statement: expression ';'
   20          | REDUCE operator reductions ENDREDUCE ';'
   21          | IF expression THEN statement_ ELSE statement_ ENDIF ';'
   22          | CASE expression IS cases_ OTHERS ARROW statement_ ENDCASE ';'

   23 cases_: cases_ optional_cases
   24       | %empty

   25 optional_cases: case
   26               | error ';'

   27 case: WHEN INT_LITERAL ARROW statement_

   28 operator: OROP
   29         | ANDOP
   30         | RELOP
   31         | ADDOP
   32         | MULOP
   33         | REMOP
   34         | EXPOP
   35         | NOTOP

   36 reductions: reductions statement_
   37           | %empty

   38 expression: expression OROP binary
   39           | binary

   40 binary: binary ANDOP relation
   41       | relation

   42 relation: relation RELOP term
   43         | term

   44 term: term ADDOP factor
   45     | factor

   46 factor: factor MULOP exponent
   47       | factor REMOP exponent
   48       | exponent

   49 exponent: unary
   50         | exponent EXPOP exponent

   51 unary: NOTOP primary
   52      | primary

   53 primary: '(' expression ')'
   54        | INT_LITERAL
   55        | REAL_LITERAL
   56        | BOOL_LITERAL
   57        | IDENTIFIER


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 53
    ')' (41) 53
    ',' (44) 10
    ':' (58) 7 12
    ';' (59) 2 3 4 16 19 20 21 22 26
    error (256) 4 8 18 26
    IDENTIFIER <iden> (258) 2 3 7 12 57
    INT_LITERAL <value> (259) 27 54
    REAL_LITERAL <value> (260) 55
    BOOL_LITERAL <value> (261) 56
    CASE <value> (262) 22
    TRUE <value> (263)
    FALSE <value> (264)
    IS <value> (265) 7 22
    WHEN <value> (266) 27
    ADDOP <oper> (267) 31 44
    MULOP <oper> (268) 32 46
    RELOP <oper> (269) 30 42
    REMOP <oper> (270) 33 47
    NOTOP <oper> (271) 35 51
    EXPOP <oper> (272) 34 50
    ANDOP <oper> (273) 29 40
    OROP <oper> (274) 28 38
    BEGIN_ (275) 16
    BOOLEAN (276) 15
    END (277) 16
    ENDREDUCE (278) 20
    FUNCTION (279) 2 3
    INTEGER (280) 13
    REDUCE (281) 20
    RETURNS (282) 2 3
    IF (283) 21
    THEN (284) 21
    ELSE (285) 21
    ENDIF (286) 21
    REAL (287) 14
    ENDCASE (288) 22
    OTHERS (289) 22
    ARROW (290) 22 27


Nonterminals, with rules where they appear

    $accept (41)
        on left: 0
    function (42)
        on left: 1
        on right: 0
    function_header (43)
        on left: 2 3 4
        on right: 1
    optional_variable (44)
        on left: 5 6
        on right: 1 5
    variable (45)
        on left: 7 8
        on right: 5
    parameters (46)
        on left: 9
        on right: 2
    optional_parameter (47)
        on left: 10 11
        on right: 9 10
    parameter (48)
        on left: 12
        on right: 9 10
    type (49)
        on left: 13 14 15
        on right: 2 3 7 12
    body <value> (50)
        on left: 16
        on right: 1
    statement_ <value> (51)
        on left: 17 18
        on right: 7 16 21 22 27 36
    statement <value> (52)
        on left: 19 20 21 22
        on right: 17
    cases_ <value> (53)
        on left: 23 24
        on right: 22 23
    optional_cases <value> (54)
        on left: 25 26
        on right: 23
    case <value> (55)
        on left: 27
        on right: 25
    operator <oper> (56)
        on left: 28 29 30 31 32 33 34 35
        on right: 20
    reductions <value> (57)
        on left: 36 37
        on right: 20 36
    expression <value> (58)
        on left: 38 39
        on right: 19 21 22 38 53
    binary <value> (59)
        on left: 40 41
        on right: 38 39 40
    relation <value> (60)
        on left: 42 43
        on right: 40 41 42
    term <value> (61)
        on left: 44 45
        on right: 42 43 44
    factor <value> (62)
        on left: 46 47 48
        on right: 44 45 46 47
    exponent <value> (63)
        on left: 49 50
        on right: 46 47 48 50
    unary <value> (64)
        on left: 51 52
        on right: 49
    primary <value> (65)
        on left: 53 54 55 56 57
        on right: 51 52


State 0

    0 $accept: . function $end

    error     shift, and go to state 1
    FUNCTION  shift, and go to state 2

    function         go to state 3
    function_header  go to state 4


State 1

    4 function_header: error . ';'

    ';'  shift, and go to state 5


State 2

    2 function_header: FUNCTION . IDENTIFIER parameters RETURNS type ';'
    3                | FUNCTION . IDENTIFIER RETURNS type ';'

    IDENTIFIER  shift, and go to state 6


State 3

    0 $accept: function . $end

    $end  shift, and go to state 7


State 4

    1 function: function_header . optional_variable body

    error       shift, and go to state 8
    IDENTIFIER  shift, and go to state 9

    BEGIN_  reduce using rule 6 (optional_variable)

    optional_variable  go to state 10
    variable           go to state 11


State 5

    4 function_header: error ';' .

    $default  reduce using rule 4 (function_header)


State 6

    2 function_header: FUNCTION IDENTIFIER . parameters RETURNS type ';'
    3                | FUNCTION IDENTIFIER . RETURNS type ';'

    IDENTIFIER  shift, and go to state 12
    RETURNS     shift, and go to state 13

    parameters  go to state 14
    parameter   go to state 15


State 7

    0 $accept: function $end .

    $default  accept


State 8

    8 variable: error .

    $default  reduce using rule 8 (variable)


State 9

    7 variable: IDENTIFIER . ':' type IS statement_

    ':'  shift, and go to state 16


State 10

    1 function: function_header optional_variable . body

    BEGIN_  shift, and go to state 17

    body  go to state 18


State 11

    5 optional_variable: variable . optional_variable

    error       shift, and go to state 8
    IDENTIFIER  shift, and go to state 9

    BEGIN_  reduce using rule 6 (optional_variable)

    optional_variable  go to state 19
    variable           go to state 11


State 12

   12 parameter: IDENTIFIER . ':' type

    ':'  shift, and go to state 20


State 13

    3 function_header: FUNCTION IDENTIFIER RETURNS . type ';'

    BOOLEAN  shift, and go to state 21
    INTEGER  shift, and go to state 22
    REAL     shift, and go to state 23

    type  go to state 24


State 14

    2 function_header: FUNCTION IDENTIFIER parameters . RETURNS type ';'

    RETURNS  shift, and go to state 25


State 15

    9 parameters: parameter . optional_parameter

    $default  reduce using rule 11 (optional_parameter)

    optional_parameter  go to state 26


State 16

    7 variable: IDENTIFIER ':' . type IS statement_

    BOOLEAN  shift, and go to state 21
    INTEGER  shift, and go to state 22
    REAL     shift, and go to state 23

    type  go to state 27


State 17

   16 body: BEGIN_ . statement_ END ';'

    error         shift, and go to state 28
    IDENTIFIER    shift, and go to state 29
    INT_LITERAL   shift, and go to state 30
    REAL_LITERAL  shift, and go to state 31
    BOOL_LITERAL  shift, and go to state 32
    CASE          shift, and go to state 33
    NOTOP         shift, and go to state 34
    REDUCE        shift, and go to state 35
    IF            shift, and go to state 36
    '('           shift, and go to state 37

    statement_  go to state 38
    statement   go to state 39
    expression  go to state 40
    binary      go to state 41
    relation    go to state 42
    term        go to state 43
    factor      go to state 44
    exponent    go to state 45
    unary       go to state 46
    primary     go to state 47


State 18

    1 function: function_header optional_variable body .

    $default  reduce using rule 1 (function)


State 19

    5 optional_variable: variable optional_variable .

    $default  reduce using rule 5 (optional_variable)


State 20

   12 parameter: IDENTIFIER ':' . type

    BOOLEAN  shift, and go to state 21
    INTEGER  shift, and go to state 22
    REAL     shift, and go to state 23

    type  go to state 48


State 21

   15 type: BOOLEAN .

    $default  reduce using rule 15 (type)


State 22

   13 type: INTEGER .

    $default  reduce using rule 13 (type)


State 23

   14 type: REAL .

    $default  reduce using rule 14 (type)


State 24

    3 function_header: FUNCTION IDENTIFIER RETURNS type . ';'

    ';'  shift, and go to state 49


State 25

    2 function_header: FUNCTION IDENTIFIER parameters RETURNS . type ';'

    BOOLEAN  shift, and go to state 21
    INTEGER  shift, and go to state 22
    REAL     shift, and go to state 23

    type  go to state 50


State 26

    9 parameters: parameter optional_parameter .
   10 optional_parameter: optional_parameter . ',' parameter

    ','  shift, and go to state 51

    $default  reduce using rule 9 (parameters)


State 27

    7 variable: IDENTIFIER ':' type . IS statement_

    IS  shift, and go to state 52


State 28

   18 statement_: error .

    $default  reduce using rule 18 (statement_)


State 29

   57 primary: IDENTIFIER .

    $default  reduce using rule 57 (primary)


State 30

   54 primary: INT_LITERAL .

    $default  reduce using rule 54 (primary)


State 31

   55 primary: REAL_LITERAL .

    $default  reduce using rule 55 (primary)


State 32

   56 primary: BOOL_LITERAL .

    $default  reduce using rule 56 (primary)


State 33

   22 statement: CASE . expression IS cases_ OTHERS ARROW statement_ ENDCASE ';'

    IDENTIFIER    shift, and go to state 29
    INT_LITERAL   shift, and go to state 30
    REAL_LITERAL  shift, and go to state 31
    BOOL_LITERAL  shift, and go to state 32
    NOTOP         shift, and go to state 34
    '('           shift, and go to state 37

    expression  go to state 53
    binary      go to state 41
    relation    go to state 42
    term        go to state 43
    factor      go to state 44
    exponent    go to state 45
    unary       go to state 46
    primary     go to state 47


State 34

   51 unary: NOTOP . primary

    IDENTIFIER    shift, and go to state 29
    INT_LITERAL   shift, and go to state 30
    REAL_LITERAL  shift, and go to state 31
    BOOL_LITERAL  shift, and go to state 32
    '('           shift, and go to state 37

    primary  go to state 54


State 35

   20 statement: REDUCE . operator reductions ENDREDUCE ';'

    ADDOP  shift, and go to state 55
    MULOP  shift, and go to state 56
    RELOP  shift, and go to state 57
    REMOP  shift, and go to state 58
    NOTOP  shift, and go to state 59
    EXPOP  shift, and go to state 60
    ANDOP  shift, and go to state 61
    OROP   shift, and go to state 62

    operator  go to state 63


State 36

   21 statement: IF . expression THEN statement_ ELSE statement_ ENDIF ';'

    IDENTIFIER    shift, and go to state 29
    INT_LITERAL   shift, and go to state 30
    REAL_LITERAL  shift, and go to state 31
    BOOL_LITERAL  shift, and go to state 32
    NOTOP         shift, and go to state 34
    '('           shift, and go to state 37

    expression  go to state 64
    binary      go to state 41
    relation    go to state 42
    term        go to state 43
    factor      go to state 44
    exponent    go to state 45
    unary       go to state 46
    primary     go to state 47


State 37

   53 primary: '(' . expression ')'

    IDENTIFIER    shift, and go to state 29
    INT_LITERAL   shift, and go to state 30
    REAL_LITERAL  shift, and go to state 31
    BOOL_LITERAL  shift, and go to state 32
    NOTOP         shift, and go to state 34
    '('           shift, and go to state 37

    expression  go to state 65
    binary      go to state 41
    relation    go to state 42
    term        go to state 43
    factor      go to state 44
    exponent    go to state 45
    unary       go to state 46
    primary     go to state 47


State 38

   16 body: BEGIN_ statement_ . END ';'

    END  shift, and go to state 66


State 39

   17 statement_: statement .

    $default  reduce using rule 17 (statement_)


State 40

   19 statement: expression . ';'
   38 expression: expression . OROP binary

    OROP  shift, and go to state 67
    ';'   shift, and go to state 68


State 41

   39 expression: binary .
   40 binary: binary . ANDOP relation

    ANDOP  shift, and go to state 69

    $default  reduce using rule 39 (expression)


State 42

   41 binary: relation .
   42 relation: relation . RELOP term

    RELOP  shift, and go to state 70

    $default  reduce using rule 41 (binary)


State 43

   43 relation: term .
   44 term: term . ADDOP factor

    ADDOP  shift, and go to state 71

    $default  reduce using rule 43 (relation)


State 44

   45 term: factor .
   46 factor: factor . MULOP exponent
   47       | factor . REMOP exponent

    MULOP  shift, and go to state 72
    REMOP  shift, and go to state 73

    $default  reduce using rule 45 (term)


State 45

   48 factor: exponent .
   50 exponent: exponent . EXPOP exponent

    EXPOP  shift, and go to state 74

    $default  reduce using rule 48 (factor)


State 46

   49 exponent: unary .

    $default  reduce using rule 49 (exponent)


State 47

   52 unary: primary .

    $default  reduce using rule 52 (unary)


State 48

   12 parameter: IDENTIFIER ':' type .

    $default  reduce using rule 12 (parameter)


State 49

    3 function_header: FUNCTION IDENTIFIER RETURNS type ';' .

    $default  reduce using rule 3 (function_header)


State 50

    2 function_header: FUNCTION IDENTIFIER parameters RETURNS type . ';'

    ';'  shift, and go to state 75


State 51

   10 optional_parameter: optional_parameter ',' . parameter

    IDENTIFIER  shift, and go to state 12

    parameter  go to state 76


State 52

    7 variable: IDENTIFIER ':' type IS . statement_

    error         shift, and go to state 28
    IDENTIFIER    shift, and go to state 29
    INT_LITERAL   shift, and go to state 30
    REAL_LITERAL  shift, and go to state 31
    BOOL_LITERAL  shift, and go to state 32
    CASE          shift, and go to state 33
    NOTOP         shift, and go to state 34
    REDUCE        shift, and go to state 35
    IF            shift, and go to state 36
    '('           shift, and go to state 37

    statement_  go to state 77
    statement   go to state 39
    expression  go to state 40
    binary      go to state 41
    relation    go to state 42
    term        go to state 43
    factor      go to state 44
    exponent    go to state 45
    unary       go to state 46
    primary     go to state 47


State 53

   22 statement: CASE expression . IS cases_ OTHERS ARROW statement_ ENDCASE ';'
   38 expression: expression . OROP binary

    IS    shift, and go to state 78
    OROP  shift, and go to state 67


State 54

   51 unary: NOTOP primary .

    $default  reduce using rule 51 (unary)


State 55

   31 operator: ADDOP .

    $default  reduce using rule 31 (operator)


State 56

   32 operator: MULOP .

    $default  reduce using rule 32 (operator)


State 57

   30 operator: RELOP .

    $default  reduce using rule 30 (operator)


State 58

   33 operator: REMOP .

    $default  reduce using rule 33 (operator)


State 59

   35 operator: NOTOP .

    $default  reduce using rule 35 (operator)


State 60

   34 operator: EXPOP .

    $default  reduce using rule 34 (operator)


State 61

   29 operator: ANDOP .

    $default  reduce using rule 29 (operator)


State 62

   28 operator: OROP .

    $default  reduce using rule 28 (operator)


State 63

   20 statement: REDUCE operator . reductions ENDREDUCE ';'

    $default  reduce using rule 37 (reductions)

    reductions  go to state 79


State 64

   21 statement: IF expression . THEN statement_ ELSE statement_ ENDIF ';'
   38 expression: expression . OROP binary

    OROP  shift, and go to state 67
    THEN  shift, and go to state 80


State 65

   38 expression: expression . OROP binary
   53 primary: '(' expression . ')'

    OROP  shift, and go to state 67
    ')'   shift, and go to state 81


State 66

   16 body: BEGIN_ statement_ END . ';'

    ';'  shift, and go to state 82


State 67

   38 expression: expression OROP . binary

    IDENTIFIER    shift, and go to state 29
    INT_LITERAL   shift, and go to state 30
    REAL_LITERAL  shift, and go to state 31
    BOOL_LITERAL  shift, and go to state 32
    NOTOP         shift, and go to state 34
    '('           shift, and go to state 37

    binary    go to state 83
    relation  go to state 42
    term      go to state 43
    factor    go to state 44
    exponent  go to state 45
    unary     go to state 46
    primary   go to state 47


State 68

   19 statement: expression ';' .

    $default  reduce using rule 19 (statement)


State 69

   40 binary: binary ANDOP . relation

    IDENTIFIER    shift, and go to state 29
    INT_LITERAL   shift, and go to state 30
    REAL_LITERAL  shift, and go to state 31
    BOOL_LITERAL  shift, and go to state 32
    NOTOP         shift, and go to state 34
    '('           shift, and go to state 37

    relation  go to state 84
    term      go to state 43
    factor    go to state 44
    exponent  go to state 45
    unary     go to state 46
    primary   go to state 47


State 70

   42 relation: relation RELOP . term

    IDENTIFIER    shift, and go to state 29
    INT_LITERAL   shift, and go to state 30
    REAL_LITERAL  shift, and go to state 31
    BOOL_LITERAL  shift, and go to state 32
    NOTOP         shift, and go to state 34
    '('           shift, and go to state 37

    term      go to state 85
    factor    go to state 44
    exponent  go to state 45
    unary     go to state 46
    primary   go to state 47


State 71

   44 term: term ADDOP . factor

    IDENTIFIER    shift, and go to state 29
    INT_LITERAL   shift, and go to state 30
    REAL_LITERAL  shift, and go to state 31
    BOOL_LITERAL  shift, and go to state 32
    NOTOP         shift, and go to state 34
    '('           shift, and go to state 37

    factor    go to state 86
    exponent  go to state 45
    unary     go to state 46
    primary   go to state 47


State 72

   46 factor: factor MULOP . exponent

    IDENTIFIER    shift, and go to state 29
    INT_LITERAL   shift, and go to state 30
    REAL_LITERAL  shift, and go to state 31
    BOOL_LITERAL  shift, and go to state 32
    NOTOP         shift, and go to state 34
    '('           shift, and go to state 37

    exponent  go to state 87
    unary     go to state 46
    primary   go to state 47


State 73

   47 factor: factor REMOP . exponent

    IDENTIFIER    shift, and go to state 29
    INT_LITERAL   shift, and go to state 30
    REAL_LITERAL  shift, and go to state 31
    BOOL_LITERAL  shift, and go to state 32
    NOTOP         shift, and go to state 34
    '('           shift, and go to state 37

    exponent  go to state 88
    unary     go to state 46
    primary   go to state 47


State 74

   50 exponent: exponent EXPOP . exponent

    IDENTIFIER    shift, and go to state 29
    INT_LITERAL   shift, and go to state 30
    REAL_LITERAL  shift, and go to state 31
    BOOL_LITERAL  shift, and go to state 32
    NOTOP         shift, and go to state 34
    '('           shift, and go to state 37

    exponent  go to state 89
    unary     go to state 46
    primary   go to state 47


State 75

    2 function_header: FUNCTION IDENTIFIER parameters RETURNS type ';' .

    $default  reduce using rule 2 (function_header)


State 76

   10 optional_parameter: optional_parameter ',' parameter .

    $default  reduce using rule 10 (optional_parameter)


State 77

    7 variable: IDENTIFIER ':' type IS statement_ .

    $default  reduce using rule 7 (variable)


State 78

   22 statement: CASE expression IS . cases_ OTHERS ARROW statement_ ENDCASE ';'

    $default  reduce using rule 24 (cases_)

    cases_  go to state 90


State 79

   20 statement: REDUCE operator reductions . ENDREDUCE ';'
   36 reductions: reductions . statement_

    error         shift, and go to state 28
    IDENTIFIER    shift, and go to state 29
    INT_LITERAL   shift, and go to state 30
    REAL_LITERAL  shift, and go to state 31
    BOOL_LITERAL  shift, and go to state 32
    CASE          shift, and go to state 33
    NOTOP         shift, and go to state 34
    ENDREDUCE     shift, and go to state 91
    REDUCE        shift, and go to state 35
    IF            shift, and go to state 36
    '('           shift, and go to state 37

    statement_  go to state 92
    statement   go to state 39
    expression  go to state 40
    binary      go to state 41
    relation    go to state 42
    term        go to state 43
    factor      go to state 44
    exponent    go to state 45
    unary       go to state 46
    primary     go to state 47


State 80

   21 statement: IF expression THEN . statement_ ELSE statement_ ENDIF ';'

    error         shift, and go to state 28
    IDENTIFIER    shift, and go to state 29
    INT_LITERAL   shift, and go to state 30
    REAL_LITERAL  shift, and go to state 31
    BOOL_LITERAL  shift, and go to state 32
    CASE          shift, and go to state 33
    NOTOP         shift, and go to state 34
    REDUCE        shift, and go to state 35
    IF            shift, and go to state 36
    '('           shift, and go to state 37

    statement_  go to state 93
    statement   go to state 39
    expression  go to state 40
    binary      go to state 41
    relation    go to state 42
    term        go to state 43
    factor      go to state 44
    exponent    go to state 45
    unary       go to state 46
    primary     go to state 47


State 81

   53 primary: '(' expression ')' .

    $default  reduce using rule 53 (primary)


State 82

   16 body: BEGIN_ statement_ END ';' .

    $default  reduce using rule 16 (body)


State 83

   38 expression: expression OROP binary .
   40 binary: binary . ANDOP relation

    ANDOP  shift, and go to state 69

    $default  reduce using rule 38 (expression)


State 84

   40 binary: binary ANDOP relation .
   42 relation: relation . RELOP term

    RELOP  shift, and go to state 70

    $default  reduce using rule 40 (binary)


State 85

   42 relation: relation RELOP term .
   44 term: term . ADDOP factor

    ADDOP  shift, and go to state 71

    $default  reduce using rule 42 (relation)


State 86

   44 term: term ADDOP factor .
   46 factor: factor . MULOP exponent
   47       | factor . REMOP exponent

    MULOP  shift, and go to state 72
    REMOP  shift, and go to state 73

    $default  reduce using rule 44 (term)


State 87

   46 factor: factor MULOP exponent .
   50 exponent: exponent . EXPOP exponent

    EXPOP  shift, and go to state 74

    $default  reduce using rule 46 (factor)


State 88

   47 factor: factor REMOP exponent .
   50 exponent: exponent . EXPOP exponent

    EXPOP  shift, and go to state 74

    $default  reduce using rule 47 (factor)


State 89

   50 exponent: exponent . EXPOP exponent
   50         | exponent EXPOP exponent .

    EXPOP  shift, and go to state 74

    EXPOP     [reduce using rule 50 (exponent)]
    $default  reduce using rule 50 (exponent)


State 90

   22 statement: CASE expression IS cases_ . OTHERS ARROW statement_ ENDCASE ';'
   23 cases_: cases_ . optional_cases

    error   shift, and go to state 94
    WHEN    shift, and go to state 95
    OTHERS  shift, and go to state 96

    optional_cases  go to state 97
    case            go to state 98


State 91

   20 statement: REDUCE operator reductions ENDREDUCE . ';'

    ';'  shift, and go to state 99


State 92

   36 reductions: reductions statement_ .

    $default  reduce using rule 36 (reductions)


State 93

   21 statement: IF expression THEN statement_ . ELSE statement_ ENDIF ';'

    ELSE  shift, and go to state 100


State 94

   26 optional_cases: error . ';'

    ';'  shift, and go to state 101


State 95

   27 case: WHEN . INT_LITERAL ARROW statement_

    INT_LITERAL  shift, and go to state 102


State 96

   22 statement: CASE expression IS cases_ OTHERS . ARROW statement_ ENDCASE ';'

    ARROW  shift, and go to state 103


State 97

   23 cases_: cases_ optional_cases .

    $default  reduce using rule 23 (cases_)


State 98

   25 optional_cases: case .

    $default  reduce using rule 25 (optional_cases)


State 99

   20 statement: REDUCE operator reductions ENDREDUCE ';' .

    $default  reduce using rule 20 (statement)


State 100

   21 statement: IF expression THEN statement_ ELSE . statement_ ENDIF ';'

    error         shift, and go to state 28
    IDENTIFIER    shift, and go to state 29
    INT_LITERAL   shift, and go to state 30
    REAL_LITERAL  shift, and go to state 31
    BOOL_LITERAL  shift, and go to state 32
    CASE          shift, and go to state 33
    NOTOP         shift, and go to state 34
    REDUCE        shift, and go to state 35
    IF            shift, and go to state 36
    '('           shift, and go to state 37

    statement_  go to state 104
    statement   go to state 39
    expression  go to state 40
    binary      go to state 41
    relation    go to state 42
    term        go to state 43
    factor      go to state 44
    exponent    go to state 45
    unary       go to state 46
    primary     go to state 47


State 101

   26 optional_cases: error ';' .

    $default  reduce using rule 26 (optional_cases)


State 102

   27 case: WHEN INT_LITERAL . ARROW statement_

    ARROW  shift, and go to state 105


State 103

   22 statement: CASE expression IS cases_ OTHERS ARROW . statement_ ENDCASE ';'

    error         shift, and go to state 28
    IDENTIFIER    shift, and go to state 29
    INT_LITERAL   shift, and go to state 30
    REAL_LITERAL  shift, and go to state 31
    BOOL_LITERAL  shift, and go to state 32
    CASE          shift, and go to state 33
    NOTOP         shift, and go to state 34
    REDUCE        shift, and go to state 35
    IF            shift, and go to state 36
    '('           shift, and go to state 37

    statement_  go to state 106
    statement   go to state 39
    expression  go to state 40
    binary      go to state 41
    relation    go to state 42
    term        go to state 43
    factor      go to state 44
    exponent    go to state 45
    unary       go to state 46
    primary     go to state 47


State 104

   21 statement: IF expression THEN statement_ ELSE statement_ . ENDIF ';'

    ENDIF  shift, and go to state 107


State 105

   27 case: WHEN INT_LITERAL ARROW . statement_

    error         shift, and go to state 28
    IDENTIFIER    shift, and go to state 29
    INT_LITERAL   shift, and go to state 30
    REAL_LITERAL  shift, and go to state 31
    BOOL_LITERAL  shift, and go to state 32
    CASE          shift, and go to state 33
    NOTOP         shift, and go to state 34
    REDUCE        shift, and go to state 35
    IF            shift, and go to state 36
    '('           shift, and go to state 37

    statement_  go to state 108
    statement   go to state 39
    expression  go to state 40
    binary      go to state 41
    relation    go to state 42
    term        go to state 43
    factor      go to state 44
    exponent    go to state 45
    unary       go to state 46
    primary     go to state 47


State 106

   22 statement: CASE expression IS cases_ OTHERS ARROW statement_ . ENDCASE ';'

    ENDCASE  shift, and go to state 109


State 107

   21 statement: IF expression THEN statement_ ELSE statement_ ENDIF . ';'

    ';'  shift, and go to state 110


State 108

   27 case: WHEN INT_LITERAL ARROW statement_ .

    $default  reduce using rule 27 (case)


State 109

   22 statement: CASE expression IS cases_ OTHERS ARROW statement_ ENDCASE . ';'

    ';'  shift, and go to state 111


State 110

   21 statement: IF expression THEN statement_ ELSE statement_ ENDIF ';' .

    $default  reduce using rule 21 (statement)


State 111

   22 statement: CASE expression IS cases_ OTHERS ARROW statement_ ENDCASE ';' .

    $default  reduce using rule 22 (statement)
