Nonterminals useless in grammar

    parameters
    parameter
    relation
    term
    factor
    primary


Terminals unused in grammar

    REPOP
    IF
    THEN
    ELSE
    ENDIF
    ','


Rules useless in grammar

   34 parameters: parameter '{' ',' parameter '}'

   35 parameter: IDENTIFIER ':' type

   36 relation: relation RELOP term
   37         | term

   38 term: term ADDOP factor
   39     | factor

   40 factor: factor MULOP primary
   41       | primary

   42 primary: '(' expression ')'
   43        | INT_LITERAL
   44        | IDENTIFIER


State 38 conflicts: 7 shift/reduce
State 60 conflicts: 7 shift/reduce


Grammar

    0 $accept: function $end

    1 function: function_header '{' variable '}' body

    2 function_header: FUNCTION IDENTIFIER '[' optional_variable ']' RETURNS type ';'

    3 optional_variable: variable
    4                  | %empty

    5 variable: IDENTIFIER ':' type IS statement_

    6 type: INTEGER
    7     | REAL
    8     | BOOLEAN

    9 body: BEGIN_ statement_ END ';'

   10 statement_: statement ';'
   11           | error ';'

   12 statement: expression ';'
   13          | REDUCE operator '{' reductions '}' ENDREDUCE ';'
   14          | CASE expression IS '{' case '}' OTHERS ARROW statement ENDCASE ';'

   15 operator: ADDOP
   16         | MULOP

   17 case: WHEN INT_LITERAL ARROW statement

   18 reductions: reductions statement_
   19           | %empty

   20 expression: '(' expression ')'
   21           | expression binary_operator expression
   22           | NOTOP expression
   23           | INT_LITERAL
   24           | REAL_LITERAL
   25           | BOOLEAN_LITERAL
   26           | IDENTIFIER

   27 binary_operator: ADDOP
   28                | MULOP
   29                | REMOP
   30                | EXPOP
   31                | RELOP
   32                | ANDOP
   33                | OROP


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 20
    ')' (41) 20
    ',' (44)
    ':' (58) 5
    ';' (59) 2 9 10 11 12 13 14
    '[' (91) 2
    ']' (93) 2
    '{' (123) 1 13 14
    '}' (125) 1 13 14
    error (256) 11
    IDENTIFIER (258) 2 5 26
    INT_LITERAL (259) 17 23
    REAL_LITERAL (260) 24
    BOOLEAN_LITERAL (261) 25
    ADDOP (262) 15 27
    MULOP (263) 16 28
    RELOP (264) 31
    ANDOP (265) 32
    REMOP (266) 29
    EXPOP (267) 30
    OROP (268) 33
    NOTOP (269) 22
    REPOP (270)
    BEGIN_ (271) 9
    BOOLEAN (272) 8
    END (273) 9
    ENDREDUCE (274) 13
    FUNCTION (275) 2
    INTEGER (276) 6
    IS (277) 5 14
    REDUCE (278) 13
    RETURNS (279) 2
    IF (280)
    THEN (281)
    WHEN (282) 17
    ELSE (283)
    ENDIF (284)
    CASE (285) 14
    OTHERS (286) 14
    ARROW (287) 14 17
    ENDCASE (288) 14
    REAL (289) 7


Nonterminals, with rules where they appear

    $accept (44)
        on left: 0
    function (45)
        on left: 1
        on right: 0
    function_header (46)
        on left: 2
        on right: 1
    optional_variable (47)
        on left: 3 4
        on right: 2
    variable (48)
        on left: 5
        on right: 1 3
    type (49)
        on left: 6 7 8
        on right: 2 5
    body (50)
        on left: 9
        on right: 1
    statement_ (51)
        on left: 10 11
        on right: 5 9 18
    statement (52)
        on left: 12 13 14
        on right: 10 14 17
    operator (53)
        on left: 15 16
        on right: 13
    case (54)
        on left: 17
        on right: 14
    reductions (55)
        on left: 18 19
        on right: 13 18
    expression (56)
        on left: 20 21 22 23 24 25 26
        on right: 12 14 20 21 22
    binary_operator (57)
        on left: 27 28 29 30 31 32 33
        on right: 21


State 0

    0 $accept: . function $end

    FUNCTION  shift, and go to state 1

    function         go to state 2
    function_header  go to state 3


State 1

    2 function_header: FUNCTION . IDENTIFIER '[' optional_variable ']' RETURNS type ';'

    IDENTIFIER  shift, and go to state 4


State 2

    0 $accept: function . $end

    $end  shift, and go to state 5


State 3

    1 function: function_header . '{' variable '}' body

    '{'  shift, and go to state 6


State 4

    2 function_header: FUNCTION IDENTIFIER . '[' optional_variable ']' RETURNS type ';'

    '['  shift, and go to state 7


State 5

    0 $accept: function $end .

    $default  accept


State 6

    1 function: function_header '{' . variable '}' body

    IDENTIFIER  shift, and go to state 8

    variable  go to state 9


State 7

    2 function_header: FUNCTION IDENTIFIER '[' . optional_variable ']' RETURNS type ';'

    IDENTIFIER  shift, and go to state 8

    $default  reduce using rule 4 (optional_variable)

    optional_variable  go to state 10
    variable           go to state 11


State 8

    5 variable: IDENTIFIER . ':' type IS statement_

    ':'  shift, and go to state 12


State 9

    1 function: function_header '{' variable . '}' body

    '}'  shift, and go to state 13


State 10

    2 function_header: FUNCTION IDENTIFIER '[' optional_variable . ']' RETURNS type ';'

    ']'  shift, and go to state 14


State 11

    3 optional_variable: variable .

    $default  reduce using rule 3 (optional_variable)


State 12

    5 variable: IDENTIFIER ':' . type IS statement_

    BOOLEAN  shift, and go to state 15
    INTEGER  shift, and go to state 16
    REAL     shift, and go to state 17

    type  go to state 18


State 13

    1 function: function_header '{' variable '}' . body

    BEGIN_  shift, and go to state 19

    body  go to state 20


State 14

    2 function_header: FUNCTION IDENTIFIER '[' optional_variable ']' . RETURNS type ';'

    RETURNS  shift, and go to state 21


State 15

    8 type: BOOLEAN .

    $default  reduce using rule 8 (type)


State 16

    6 type: INTEGER .

    $default  reduce using rule 6 (type)


State 17

    7 type: REAL .

    $default  reduce using rule 7 (type)


State 18

    5 variable: IDENTIFIER ':' type . IS statement_

    IS  shift, and go to state 22


State 19

    9 body: BEGIN_ . statement_ END ';'

    error            shift, and go to state 23
    IDENTIFIER       shift, and go to state 24
    INT_LITERAL      shift, and go to state 25
    REAL_LITERAL     shift, and go to state 26
    BOOLEAN_LITERAL  shift, and go to state 27
    NOTOP            shift, and go to state 28
    REDUCE           shift, and go to state 29
    CASE             shift, and go to state 30
    '('              shift, and go to state 31

    statement_  go to state 32
    statement   go to state 33
    expression  go to state 34


State 20

    1 function: function_header '{' variable '}' body .

    $default  reduce using rule 1 (function)


State 21

    2 function_header: FUNCTION IDENTIFIER '[' optional_variable ']' RETURNS . type ';'

    BOOLEAN  shift, and go to state 15
    INTEGER  shift, and go to state 16
    REAL     shift, and go to state 17

    type  go to state 35


State 22

    5 variable: IDENTIFIER ':' type IS . statement_

    error            shift, and go to state 23
    IDENTIFIER       shift, and go to state 24
    INT_LITERAL      shift, and go to state 25
    REAL_LITERAL     shift, and go to state 26
    BOOLEAN_LITERAL  shift, and go to state 27
    NOTOP            shift, and go to state 28
    REDUCE           shift, and go to state 29
    CASE             shift, and go to state 30
    '('              shift, and go to state 31

    statement_  go to state 36
    statement   go to state 33
    expression  go to state 34


State 23

   11 statement_: error . ';'

    ';'  shift, and go to state 37


State 24

   26 expression: IDENTIFIER .

    $default  reduce using rule 26 (expression)


State 25

   23 expression: INT_LITERAL .

    $default  reduce using rule 23 (expression)


State 26

   24 expression: REAL_LITERAL .

    $default  reduce using rule 24 (expression)


State 27

   25 expression: BOOLEAN_LITERAL .

    $default  reduce using rule 25 (expression)


State 28

   22 expression: NOTOP . expression

    IDENTIFIER       shift, and go to state 24
    INT_LITERAL      shift, and go to state 25
    REAL_LITERAL     shift, and go to state 26
    BOOLEAN_LITERAL  shift, and go to state 27
    NOTOP            shift, and go to state 28
    '('              shift, and go to state 31

    expression  go to state 38


State 29

   13 statement: REDUCE . operator '{' reductions '}' ENDREDUCE ';'

    ADDOP  shift, and go to state 39
    MULOP  shift, and go to state 40

    operator  go to state 41


State 30

   14 statement: CASE . expression IS '{' case '}' OTHERS ARROW statement ENDCASE ';'

    IDENTIFIER       shift, and go to state 24
    INT_LITERAL      shift, and go to state 25
    REAL_LITERAL     shift, and go to state 26
    BOOLEAN_LITERAL  shift, and go to state 27
    NOTOP            shift, and go to state 28
    '('              shift, and go to state 31

    expression  go to state 42


State 31

   20 expression: '(' . expression ')'

    IDENTIFIER       shift, and go to state 24
    INT_LITERAL      shift, and go to state 25
    REAL_LITERAL     shift, and go to state 26
    BOOLEAN_LITERAL  shift, and go to state 27
    NOTOP            shift, and go to state 28
    '('              shift, and go to state 31

    expression  go to state 43


State 32

    9 body: BEGIN_ statement_ . END ';'

    END  shift, and go to state 44


State 33

   10 statement_: statement . ';'

    ';'  shift, and go to state 45


State 34

   12 statement: expression . ';'
   21 expression: expression . binary_operator expression

    ADDOP  shift, and go to state 46
    MULOP  shift, and go to state 47
    RELOP  shift, and go to state 48
    ANDOP  shift, and go to state 49
    REMOP  shift, and go to state 50
    EXPOP  shift, and go to state 51
    OROP   shift, and go to state 52
    ';'    shift, and go to state 53

    binary_operator  go to state 54


State 35

    2 function_header: FUNCTION IDENTIFIER '[' optional_variable ']' RETURNS type . ';'

    ';'  shift, and go to state 55


State 36

    5 variable: IDENTIFIER ':' type IS statement_ .

    $default  reduce using rule 5 (variable)


State 37

   11 statement_: error ';' .

    $default  reduce using rule 11 (statement_)


State 38

   21 expression: expression . binary_operator expression
   22           | NOTOP expression .

    ADDOP  shift, and go to state 46
    MULOP  shift, and go to state 47
    RELOP  shift, and go to state 48
    ANDOP  shift, and go to state 49
    REMOP  shift, and go to state 50
    EXPOP  shift, and go to state 51
    OROP   shift, and go to state 52

    ADDOP     [reduce using rule 22 (expression)]
    MULOP     [reduce using rule 22 (expression)]
    RELOP     [reduce using rule 22 (expression)]
    ANDOP     [reduce using rule 22 (expression)]
    REMOP     [reduce using rule 22 (expression)]
    EXPOP     [reduce using rule 22 (expression)]
    OROP      [reduce using rule 22 (expression)]
    $default  reduce using rule 22 (expression)

    binary_operator  go to state 54


State 39

   15 operator: ADDOP .

    $default  reduce using rule 15 (operator)


State 40

   16 operator: MULOP .

    $default  reduce using rule 16 (operator)


State 41

   13 statement: REDUCE operator . '{' reductions '}' ENDREDUCE ';'

    '{'  shift, and go to state 56


State 42

   14 statement: CASE expression . IS '{' case '}' OTHERS ARROW statement ENDCASE ';'
   21 expression: expression . binary_operator expression

    ADDOP  shift, and go to state 46
    MULOP  shift, and go to state 47
    RELOP  shift, and go to state 48
    ANDOP  shift, and go to state 49
    REMOP  shift, and go to state 50
    EXPOP  shift, and go to state 51
    OROP   shift, and go to state 52
    IS     shift, and go to state 57

    binary_operator  go to state 54


State 43

   20 expression: '(' expression . ')'
   21           | expression . binary_operator expression

    ADDOP  shift, and go to state 46
    MULOP  shift, and go to state 47
    RELOP  shift, and go to state 48
    ANDOP  shift, and go to state 49
    REMOP  shift, and go to state 50
    EXPOP  shift, and go to state 51
    OROP   shift, and go to state 52
    ')'    shift, and go to state 58

    binary_operator  go to state 54


State 44

    9 body: BEGIN_ statement_ END . ';'

    ';'  shift, and go to state 59


State 45

   10 statement_: statement ';' .

    $default  reduce using rule 10 (statement_)


State 46

   27 binary_operator: ADDOP .

    $default  reduce using rule 27 (binary_operator)


State 47

   28 binary_operator: MULOP .

    $default  reduce using rule 28 (binary_operator)


State 48

   31 binary_operator: RELOP .

    $default  reduce using rule 31 (binary_operator)


State 49

   32 binary_operator: ANDOP .

    $default  reduce using rule 32 (binary_operator)


State 50

   29 binary_operator: REMOP .

    $default  reduce using rule 29 (binary_operator)


State 51

   30 binary_operator: EXPOP .

    $default  reduce using rule 30 (binary_operator)


State 52

   33 binary_operator: OROP .

    $default  reduce using rule 33 (binary_operator)


State 53

   12 statement: expression ';' .

    $default  reduce using rule 12 (statement)


State 54

   21 expression: expression binary_operator . expression

    IDENTIFIER       shift, and go to state 24
    INT_LITERAL      shift, and go to state 25
    REAL_LITERAL     shift, and go to state 26
    BOOLEAN_LITERAL  shift, and go to state 27
    NOTOP            shift, and go to state 28
    '('              shift, and go to state 31

    expression  go to state 60


State 55

    2 function_header: FUNCTION IDENTIFIER '[' optional_variable ']' RETURNS type ';' .

    $default  reduce using rule 2 (function_header)


State 56

   13 statement: REDUCE operator '{' . reductions '}' ENDREDUCE ';'

    $default  reduce using rule 19 (reductions)

    reductions  go to state 61


State 57

   14 statement: CASE expression IS . '{' case '}' OTHERS ARROW statement ENDCASE ';'

    '{'  shift, and go to state 62


State 58

   20 expression: '(' expression ')' .

    $default  reduce using rule 20 (expression)


State 59

    9 body: BEGIN_ statement_ END ';' .

    $default  reduce using rule 9 (body)


State 60

   21 expression: expression . binary_operator expression
   21           | expression binary_operator expression .

    ADDOP  shift, and go to state 46
    MULOP  shift, and go to state 47
    RELOP  shift, and go to state 48
    ANDOP  shift, and go to state 49
    REMOP  shift, and go to state 50
    EXPOP  shift, and go to state 51
    OROP   shift, and go to state 52

    ADDOP     [reduce using rule 21 (expression)]
    MULOP     [reduce using rule 21 (expression)]
    RELOP     [reduce using rule 21 (expression)]
    ANDOP     [reduce using rule 21 (expression)]
    REMOP     [reduce using rule 21 (expression)]
    EXPOP     [reduce using rule 21 (expression)]
    OROP      [reduce using rule 21 (expression)]
    $default  reduce using rule 21 (expression)

    binary_operator  go to state 54


State 61

   13 statement: REDUCE operator '{' reductions . '}' ENDREDUCE ';'
   18 reductions: reductions . statement_

    error            shift, and go to state 23
    IDENTIFIER       shift, and go to state 24
    INT_LITERAL      shift, and go to state 25
    REAL_LITERAL     shift, and go to state 26
    BOOLEAN_LITERAL  shift, and go to state 27
    NOTOP            shift, and go to state 28
    REDUCE           shift, and go to state 29
    CASE             shift, and go to state 30
    '}'              shift, and go to state 63
    '('              shift, and go to state 31

    statement_  go to state 64
    statement   go to state 33
    expression  go to state 34


State 62

   14 statement: CASE expression IS '{' . case '}' OTHERS ARROW statement ENDCASE ';'

    WHEN  shift, and go to state 65

    case  go to state 66


State 63

   13 statement: REDUCE operator '{' reductions '}' . ENDREDUCE ';'

    ENDREDUCE  shift, and go to state 67


State 64

   18 reductions: reductions statement_ .

    $default  reduce using rule 18 (reductions)


State 65

   17 case: WHEN . INT_LITERAL ARROW statement

    INT_LITERAL  shift, and go to state 68


State 66

   14 statement: CASE expression IS '{' case . '}' OTHERS ARROW statement ENDCASE ';'

    '}'  shift, and go to state 69


State 67

   13 statement: REDUCE operator '{' reductions '}' ENDREDUCE . ';'

    ';'  shift, and go to state 70


State 68

   17 case: WHEN INT_LITERAL . ARROW statement

    ARROW  shift, and go to state 71


State 69

   14 statement: CASE expression IS '{' case '}' . OTHERS ARROW statement ENDCASE ';'

    OTHERS  shift, and go to state 72


State 70

   13 statement: REDUCE operator '{' reductions '}' ENDREDUCE ';' .

    $default  reduce using rule 13 (statement)


State 71

   17 case: WHEN INT_LITERAL ARROW . statement

    IDENTIFIER       shift, and go to state 24
    INT_LITERAL      shift, and go to state 25
    REAL_LITERAL     shift, and go to state 26
    BOOLEAN_LITERAL  shift, and go to state 27
    NOTOP            shift, and go to state 28
    REDUCE           shift, and go to state 29
    CASE             shift, and go to state 30
    '('              shift, and go to state 31

    statement   go to state 73
    expression  go to state 34


State 72

   14 statement: CASE expression IS '{' case '}' OTHERS . ARROW statement ENDCASE ';'

    ARROW  shift, and go to state 74


State 73

   17 case: WHEN INT_LITERAL ARROW statement .

    $default  reduce using rule 17 (case)


State 74

   14 statement: CASE expression IS '{' case '}' OTHERS ARROW . statement ENDCASE ';'

    IDENTIFIER       shift, and go to state 24
    INT_LITERAL      shift, and go to state 25
    REAL_LITERAL     shift, and go to state 26
    BOOLEAN_LITERAL  shift, and go to state 27
    NOTOP            shift, and go to state 28
    REDUCE           shift, and go to state 29
    CASE             shift, and go to state 30
    '('              shift, and go to state 31

    statement   go to state 75
    expression  go to state 34


State 75

   14 statement: CASE expression IS '{' case '}' OTHERS ARROW statement . ENDCASE ';'

    ENDCASE  shift, and go to state 76


State 76

   14 statement: CASE expression IS '{' case '}' OTHERS ARROW statement ENDCASE . ';'

    ';'  shift, and go to state 77


State 77

   14 statement: CASE expression IS '{' case '}' OTHERS ARROW statement ENDCASE ';' .

    $default  reduce using rule 14 (statement)
